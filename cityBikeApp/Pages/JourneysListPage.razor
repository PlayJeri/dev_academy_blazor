@inject cityBikeApp.Services.IJourneysService JourneyService
@using cityBikeApp.Models
@using cityBikeApp.Components
@page "/journeys"

@if (journeys == null || journeys.Count == 0)
{
    <p>No journeys found.</p>
}
else
{
    <div class="container my-12 mx-auto overflow-auto">
    <JourneysTable Journeys="journeys" OnHeaderClick="HandleHeaderClick" />
    <div class="flex justify-around md:w-1/4 w-full mx-auto h-12 my-6">
        <button class="bg-blue-500 hover:bg-blue-700 disabled:bg-gray-500 text-white font-bold py-2 px-4 rounded"
            @onclick="PreviousPage" disabled="@(offset < limit)">
            Previous
        </button>
        <button class="bg-blue-500 hover:bg-blue-700 disabled:bg-gray-500 text-white font-bold py-2 px-4 rounded"
            @onclick="NextPage" disabled="@(journeys == null || journeys.Count < limit)">
            Next
        </button>
    </div>
</div>
}

@code {
    private List<Journey>? journeys;
    private bool isProcessing = false;
    private int offset = 0;
    private int limit = 20;
    private bool ascendingOrder = true;
    private OrderBy orderBy = OrderBy.DepartureStationName;
    async void HandleHeaderClick(OrderBy orderBy)
    {
        if (isProcessing) return;
        isProcessing = true;
        if (this.orderBy == orderBy)
        {
            ascendingOrder = !ascendingOrder;
        }
        this.orderBy = orderBy;
        await UpdateJourneys();
        isProcessing = false;
        StateHasChanged();
    }
    private async Task NextPage()
    {
        if (isProcessing) return;
        isProcessing = true;
        if (journeys == null || journeys.Count < limit) return;
        offset += limit;
        await UpdateJourneys();
        isProcessing = false;
    }
    private async Task PreviousPage()
    {
        if (isProcessing) return;
        isProcessing = true;
        if (offset < limit) return;
        offset -= limit;
        await UpdateJourneys();
        isProcessing = false;
    }
    private async Task UpdateJourneys()
    {
        journeys = await JourneyService.GetJourneys(ascendingOrder, orderBy, offset, limit);
    }

    protected override async Task OnInitializedAsync()
    {
        journeys = await JourneyService.GetJourneys();
    }
}
